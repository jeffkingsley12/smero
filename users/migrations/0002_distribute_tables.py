# Generated by Django 4.2.7 on 2023-11-09 16:45
from django.db import migrations
from django_multitenant.db import migrations as tenant_migrations

class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        # Step 1: Drop primary key constraints
        migrations.RunSQL(
            sql=[
                "ALTER TABLE users_classteacher DROP CONSTRAINT IF EXISTS users_classteacher_pkey CASCADE;",
                "ALTER TABLE users_director DROP CONSTRAINT IF EXISTS users_director_pkey CASCADE;",
                "ALTER TABLE users_headteacher DROP CONSTRAINT IF EXISTS users_headteacher_pkey CASCADE;",
                "ALTER TABLE users_level DROP CONSTRAINT IF EXISTS users_level_pkey CASCADE;",
                "ALTER TABLE users_student DROP CONSTRAINT IF EXISTS users_student_pkey CASCADE;",
                "ALTER TABLE users_teacher DROP CONSTRAINT IF EXISTS users_teacher_pkey CASCADE;",
                "ALTER TABLE users_schoolworker DROP CONSTRAINT IF EXISTS users_schoolworker_pkey CASCADE;",
            ],
            reverse_sql=[
                # Add reverse SQL if needed
            ]
        ),

        # Step 2: Drop user_id unique constraints
        migrations.RunSQL(
            sql=[
                "ALTER TABLE IF EXISTS users_classteacher DROP CONSTRAINT IF EXISTS users_classteacher_user_id_key CASCADE;",
                "ALTER TABLE IF EXISTS users_director DROP CONSTRAINT IF EXISTS users_director_user_id_key CASCADE;",
                "ALTER TABLE IF EXISTS users_headteacher DROP CONSTRAINT IF EXISTS users_headteacher_user_id_key CASCADE;",
                "ALTER TABLE IF EXISTS users_level DROP CONSTRAINT IF EXISTS users_level_user_id_key CASCADE;",
                "ALTER TABLE IF EXISTS users_student DROP CONSTRAINT IF EXISTS users_student_user_id_key CASCADE;",
                "ALTER TABLE IF EXISTS users_teacher DROP CONSTRAINT IF EXISTS users_teacher_user_id_key CASCADE;",
                "ALTER TABLE IF EXISTS users_schoolworker DROP CONSTRAINT IF EXISTS users_schoolworker_user_id_key CASCADE;",
            ],
            reverse_sql=[
                # Add reverse SQL if needed
            ]
        ),

        # Step 3: Distribute tables
        tenant_migrations.Distribute("Level"),
        tenant_migrations.Distribute("Director"),
        tenant_migrations.Distribute("Headteacher"),
        tenant_migrations.Distribute("ClassTeacher"),
        tenant_migrations.Distribute("Teacher"),
        tenant_migrations.Distribute("SchoolWorker"),
        tenant_migrations.Distribute("Student"),

        # Step 4: Add new primary key constraints
        migrations.RunSQL(
            sql=[
                "ALTER TABLE users_level ADD CONSTRAINT users_level_pkey PRIMARY KEY (school_id, level_id);",
                "ALTER TABLE users_classteacher ADD CONSTRAINT users_classteacher_pkey PRIMARY KEY (school_id, classteacher_id);",
                "ALTER TABLE users_director ADD CONSTRAINT users_director_pkey PRIMARY KEY (school_id, director_id);",
                "ALTER TABLE users_headteacher ADD CONSTRAINT users_headteacher_pkey PRIMARY KEY (school_id, headteach_id);",
                "ALTER TABLE users_schoolworker ADD CONSTRAINT users_schoolworker_pkey PRIMARY KEY (school_id, schoolworker_id);",
                "ALTER TABLE users_student ADD CONSTRAINT users_student_pkey PRIMARY KEY (school_id, student_id);",
                "ALTER TABLE users_teacher ADD CONSTRAINT users_teacher_pkey PRIMARY KEY (school_id, teacher_id);",
            ],
            reverse_sql=[
                # Add reverse SQL if needed
            ]
        ),

        # Step 5: Truncate local data after distributing (if needed)
        migrations.RunSQL(
            "SELECT truncate_local_data_after_distributing_table($$public.auth_user$$);"
        ),
    ]
